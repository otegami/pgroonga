name: Windows
on:
  push:
  pull_request:
  schedule:
    - cron: |
        0 0 * * *
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  test:
    if: >-
      github.event_name != 'schedule' ||
      (github.event_name == 'schedule' &&
       github.repository_owner == 'pgroonga')
    name: PostgreSQL ${{ matrix.postgresql-version-major }} ${{ matrix.groonga-main == 'yes' && '+ Groonga main' || '' }}
    timeout-minutes: 30
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - postgresql-version-major: "13"
            postgresql-version: "13.21-1"
          - postgresql-version-major: "14"
            postgresql-version: "14.18-1"
          - postgresql-version-major: "15"
            postgresql-version: "15.13-1"
          - postgresql-version-major: "16"
            postgresql-version: "16.9-1"
          - postgresql-version-major: "17"
            postgresql-version: "17.5-1"
          - groonga-main: "yes"
            postgresql-version-major: "17"
            postgresql-version: "17.5-1"
    env:
      PGROONGA_BENCHMARK_GEMFILE: ${{ github.workspace }}\pgroonga-benchmark\Gemfile
      PGROONGA_TEST_DATA: "test-data"
      PGROONGA_TEST_ENCODING: "UTF-8"
      PGROONGA_TEST_USER: "pgroonga-test"
    steps:
      - name: Disable crash dialog
        run: |
          reg add "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Install Visual Studio
        if:
          matrix.visual-studio-package
        run: |
          choco install -y ${{ matrix.visual-studio-package }}
      - name: Prepare environments
        run: |
          Write-Output "VC_PREFIX=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Output "CCACHE_DIR=${{ github.workspace }}\ccache" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $ARTIFACT_ID = "postgresql-${{ matrix.postgresql-version-major }}-x64"
          if ("${{ matrix.groonga-main }}" -eq "yes") {
            $ARTIFACT_ID += "-groonga-main"
          } else {
            $ARTIFACT_ID = "release-${ARTIFACT_ID}"
          }
          Write-Output "ARTIFACT_ID=${ARTIFACT_ID}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ccache
          key: meson-windows-msvc-${{ env.ARTIFACT_ID }}-ccache-${{ hashFiles('src/**') }}
          restore-keys: meson-windows-msvc-${{ env.ARTIFACT_ID }}-ccache-
      - name: Prepare ccache
        run: |
          choco install ccache
          Get-Command ccache
          (Get-Command ccache).Source
          ccache --show-stats --verbose --version
      - name: Download PostgreSQL
        run: |
          cd ..
          $POSTGRESQL_ARCHIVE_NAME = `
            "postgresql-${{ matrix.postgresql-version }}-windows-x64-binaries.zip"
          Invoke-WebRequest `
            "https://get.enterprisedb.com/postgresql/$POSTGRESQL_ARCHIVE_NAME" `
            -OutFile $POSTGRESQL_ARCHIVE_NAME
          Expand-Archive -Path $POSTGRESQL_ARCHIVE_NAME -DestinationPath .
      - name: Download Groonga
        run: |
          if ("${{ matrix.groonga-main }}" -eq "yes") {
            git clone --depth 1 `
              https://github.com/groonga/groonga.git `
            vendor\groonga
            cd vendor\groonga
            git submodule update --init
            cd vendor
            ruby download_groonga_normalizer_mysql.rb
            ruby download_lz4.rb
            ruby download_mecab.rb
            ruby download_rapidjson.rb
            ruby download_xxhash.rb
            ruby download.rb
          } else {
            Invoke-WebRequest `
              https://packages.groonga.org/source/groonga/groonga-latest.zip `
              -OutFile groonga-latest.zip
            Expand-Archive -Path groonga-latest.zip -DestinationPath .
            rm groonga-latest.zip
            mv groonga-* vendor\groonga
          }
      - name: Install Meson
        run: |
          choco install meson
          $env:PATH = "C:\ProgramData\chocolatey\bin;$env:PATH"
          Write-Output "MESON_PATH=C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Setup Meson subprojects for Groonga
        run: |
          mkdir -p subprojects
          cmd /c mklink /j subprojects\groonga vendor\groonga
      - name: Setup Meson
        shell: cmd
        run: |
          set "PATH=%MESON_PATH%;%PATH%"
          call "%VC_PREFIX%\Auxiliary\Build\vcvars64.bat"
          meson setup ..\pgroonga.build --prefix="..\pgsql"
      - name: Build
        shell: cmd
        run: |
          set "PATH=%MESON_PATH%;%PATH%"
          call "%VC_PREFIX%\Auxiliary\Build\vcvars64.bat"
          meson compile -C ..\pgroonga.build
      - name: Install
        shell: cmd
        run: |
          set "PATH=%MESON_PATH%;%PATH%"
          call "%VC_PREFIX%\Auxiliary\Build\vcvars64.bat"
          meson install -C ..\pgroonga.build

      # Upload artifacts
      - name: Package
        shell: cmd
        run: |
          set "PATH=%MESON_PATH%;%PATH%"
          call "%VC_PREFIX%\Auxiliary\Build\vcvars64.bat"
          mkdir artifacts
          cd ..\pgroonga.build
          meson dist --formats=zip
          copy meson-dist\*.zip ..\pgroonga\artifacts\
          cd ..\pgroonga
          for /f %%i in ('dir /b artifacts\*.zip') do echo ARTIFACT_BASENAME=%%i>> %GITHUB_ENV%
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_ID }}
          path: artifacts

      # Test
      - name: Run PostgreSQL for test
        run: |
          ..\pgsql\bin\initdb `
            --encoding=${Env:PGROONGA_TEST_ENCODING} `
            --locale=C `
            --pgdata=${Env:PGROONGA_TEST_DATA} `
            --username=${Env:PGROONGA_TEST_USER}
          Write-Output "max_prepared_transactions = 1" | `
            Out-File `
              -FilePath ${Env:PGROONGA_TEST_DATA}\postgresql.conf `
              -Encoding utf8 `
              -Append
          ..\pgsql\bin\pg_ctl start `
            --pgdata=${Env:PGROONGA_TEST_DATA}
      - name: Run regression test
        run: |
          # TODO: Remove me when Groonga bundles libstemmer
          Remove-Item sql\full-text-search\text\options\token-filters\custom.sql
          # Reduce tests to reduce test time
          Remove-Item sql\compatibility -Recurse -Force
          ruby test\prepare.rb > schedule
          $Env:PG_REGRESS_DIFF_OPTS = "-u"
          if (${{ matrix.postgresql-version-major }} -ge 17) {
            # pg_regress.exe depends on libpq.dll and libpq.dll exists
            # in pgsql\bin\. We need to set $Env:PATH or use same
            # directory to resolve the dependency. We use the same
            # directory approach here.
            Copy-Item `
              -Path ..\pgsql\lib\pgxs\src\test\regress\pg_regress.exe `
              ..\pgsql\bin\
          }
          ..\pgsql\bin\pg_regress `
            --bindir=..\pgsql\bin `
            --encoding=${Env:PGROONGA_TEST_ENCODING} `
            --launcher=test\short-pgappname.bat `
            --load-extension=pgroonga `
            --schedule=schedule `
            --user=${Env:PGROONGA_TEST_USER}
      - name: Shutdown PostgreSQL for test
        if: always()
        run: |
          ..\pgsql\bin\pg_ctl stop `
            --pgdata=${Env:PGROONGA_TEST_DATA}
      - name: Show diff
        if: failure()
        run: |
          Get-Content regression.diffs
      - uses: actions/checkout@v5
        with:
          repository: pgroonga/benchmark
          path: pgroonga-benchmark
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true
      - name: Run unit test
        run: |
          $Env:PATH = "$(Get-Location)\..\pgsql\bin;${Env:PATH}"
          # TODO: Remove me when we fix test failure on Windows
          Remove-Item test\test-streaming-replication.rb
          bundle exec ruby `
            -I${{ github.workspace }}\pgroonga-benchmark\lib `
            test\run-test.rb
